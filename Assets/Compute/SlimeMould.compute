#include "Random/Random.hlsl"
#include "Structs/Agent.hlsl"
#include "Structs/SpeciesSettings.hlsl"

#define PI     3.14159265359f
#define TWO_PI 6.28318530718f

#define DEG_2_RAD(inp) inp * 0.01745329251f

RWStructuredBuffer<Agent> Agents;
RWStructuredBuffer<SpeciesSettings> Settings;

uint NumAgents;
uint NumSpecies;

RWTexture2D<float4> TrailMap;
uint Width;
uint Height;

float TrailWeight;

float DeltaTime;
float Time;

float Sense(const Agent agent, const SpeciesSettings settings, const float sensorAngleOffset)
{
    const float sensorAngle = agent.angle + sensorAngleOffset;
    const float2 sensorDir = float2(cos(sensorAngle), sin(sensorAngle));

    float2 sensorPos = agent.position + sensorDir * settings.sensorOffsetDst;
    const int sensorCentreX = (int)sensorPos.x;
    const int sensorCentreY = (int)sensorPos.y;

    float sum = 0;

    const int4 senseWeight = agent.speciesMask * 2 - 1;

    for (int offsetX = -settings.sensorSize; offsetX <= settings.sensorSize; ++offsetX)
    {
        for (int offsetY = -settings.sensorSize; offsetY <= settings.sensorSize; ++offsetY)
        {
            sum += dot(
                senseWeight,
                TrailMap[
                    int2(min(Width - 1, max(0, sensorCentreX + offsetX)),
                         min(Height - 1, max(0, sensorCentreY + offsetY)))]
            );
        }
    }

    return sum;
}


#pragma kernel Update
[numthreads(16,1,1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= NumAgents)
        return;

    Agent agent = Agents[id.x];

    const SpeciesSettings settings = Settings[agent.speciesIndex];

    float2 pos = agent.position;

    SetSeed(pos.x * Width + pos.y * Height + Time * 532543);

    const float sensorAngleRad = DEG_2_RAD(settings.sensorAngleDegrees);

    const float weightForward = Sense(agent, settings, 0);
    const float weightLeft = Sense(agent, settings, sensorAngleRad);
    const float weightRight = Sense(agent, settings, -sensorAngleRad);

    const float randomSteerStrength = Random();
    const float turnSpeed = settings.turnSpeed * 2 * PI;

    if (weightForward > weightLeft && weightForward > weightRight)
    {
        agent.angle += 0;
    }
    else if (weightForward < weightLeft && weightForward < weightRight)
    {
        agent.angle += (randomSteerStrength - 0.5) * 2 * turnSpeed * DeltaTime;
    }
    else if (weightRight > weightLeft)
    {
        agent.angle -= randomSteerStrength * turnSpeed * DeltaTime;
    }
    else if (weightLeft > weightRight)
    {
        agent.angle += randomSteerStrength * turnSpeed * DeltaTime;
    }


    const float2 direction = float2(cos(agent.angle), sin(agent.angle));
    float2 newPos = agent.position + direction * settings.moveSpeed * DeltaTime;
    
    if (newPos.x < 0 || newPos.x >= Width || newPos.y < 0 || newPos.y >= Height)
    {
        newPos.x = min(Width - 0.01, max(0, newPos.x));
        newPos.y = min(Height - 0.01, max(0, newPos.y));

        agent.angle = Random() * TWO_PI;
        agent.position = newPos;
    } else
    {
        agent.position = newPos;
        const int2 coord = int2(newPos);
        const float4 oldTrail = TrailMap[coord];
        TrailMap[coord] = min(1, oldTrail + agent.speciesMask * TrailWeight * DeltaTime);
    }
    
    Agents[id.x] = agent;
}

#pragma kernel Diffuse

float DiffuseRate;
float DecayRate;

RWTexture2D<float4> DiffusedTrailMap;

[numthreads(8,8,1)]
void Diffuse(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= Width || id.y < 0 || id.y >= Height)
        return;

    float4 sum = 0;
    const float4 orgCol = TrailMap[id.xy];

    for (int offsetX = -1; offsetX <= 1; ++offsetX)
    {
        for (int offsetY = -1; offsetY <= 1; ++offsetY)
        {
            sum += TrailMap[int2(min(Width - 1, max(0, id.x + offsetX)), min(Height - 1, max(0, id.y + offsetY)))];
        }
    }

    float4 blurredCol = sum * 0.1111111f;

    const float diffuseWeight = saturate(DiffuseRate * DeltaTime);
    blurredCol = orgCol * (1 - diffuseWeight) + blurredCol * diffuseWeight;

    DiffusedTrailMap[id.xy] = max(0, blurredCol - DecayRate * DeltaTime);
}

#pragma kernel Color

RWTexture2D<float4> ColorMap;

[numthreads(8,8,1)]
void Color(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= Width || id.y < 0 || id.y >= Height)
        return;

    float4 map = TrailMap[id.xy];

    float4 color = 0;

    for (uint i = 0; i < NumSpecies; ++i)
    {
        float4 mask = float4(i == 0, i == 1, i == 2, i == 3);
        color += Settings[i].color * dot(map, mask);
    }

    ColorMap[id.xy] = color;
}
